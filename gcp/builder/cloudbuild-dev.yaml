steps:

### Build
  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
          docker build -t gcr.io/$PROJECT_ID/demo:${BRANCH_NAME}-${SHORT_SHA} .

### Test

### Publish
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
          docker push gcr.io/$PROJECT_ID/demo:${BRANCH_NAME}-${SHORT_SHA}

### Sonarqube
  - id: 'run-sonarqube'
    name: 'gcr.io/$PROJECT_ID/sonar-scanner:latest'
    args:
    - '-Dsonar.host.url=https://sonarcloud.io'
    - '-Dsonar.login=a60eb05b0aa82e81873bb247ad77724d01bf6a2d'
    - '-Dsonar.projectKey=danizheleva_demo-2T-GKE-CB'
    - '-Dsonar.organization=danizheleva'
    - '-Dsonar.sources=./src/main/java'
    - '-Dsonar.java.binaries=./src/main/java'
    - '-Dsonar.branch.name=${BRANCH_NAME}'

### Attest Sonar
  - id: 'attest-sonarqube'
    name: 'gcr.io/$PROJECT_ID/binauthz-attestation-sonar:latest'
    args:
      - '--artifact-url'
      - 'gcr.io/$PROJECT_ID/demo:$BRANCH_NAME-$SHORT_SHA'
      - '--attestor'
      - 'projects/$PROJECT_ID/attestors/sonar-approved'
      - '--keyversion'
      - 'projects/$PROJECT_ID/locations/global/keyRings/my-binauthz-keyring/cryptoKeys/binauthzkey/cryptoKeyVersions/1'

### Deploy
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          CLUSTER=$$(gcloud config get-value container/cluster)
          PROJECT=$$(gcloud config get-value core/project)
          ZONE=$$(gcloud config get-value compute/zone)
          
          gcloud container clusters get-credentials "$${CLUSTER}"	\
            --project "$${PROJECT}" \
            --zone "europe-west1-b"  
                    
          DIGEST=$(gcloud container images describe gcr.io/$PROJECT_ID/demo:${BRANCH_NAME}-${SHORT_SHA} --format="value(image_summary.digest)")

          sed -i "s|gcr.io/$PROJECT_ID/demo:.*|gcr.io/$PROJECT_ID/demo@$${DIGEST}|" ./kubernetes/deployments/dev/*.yaml
                    
          kubectl get ns ${BRANCH_NAME} || kubectl create ns ${BRANCH_NAME}
          kubectl apply --namespace ${BRANCH_NAME} --recursive -f kubernetes/deployments/dev
          kubectl apply --namespace ${BRANCH_NAME} --recursive -f kubernetes/services

### Attest e2e
  - id: 'attest-e2e'
    name: 'gcr.io/$PROJECT_ID/binauthz-attestation-e2e:latest'
    args:
      - '--artifact-url'
      - 'gcr.io/$PROJECT_ID/demo:$BRANCH_NAME-$SHORT_SHA'
      - '--attestor'
      - 'projects/$PROJECT_ID/attestors/e2e-approved'
      - '--keyversion'
      - 'projects/$PROJECT_ID/locations/global/keyRings/my-binauthz-keyring/cryptoKeys/binauthzkey/cryptoKeyVersions/1'
