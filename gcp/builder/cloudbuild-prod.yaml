steps:

### Build

  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
          gcloud auth application-default login
          docker build -t gcr.io/$PROJECT_ID/demo:$TAG_NAME .
### Test


### Publish
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
          docker push gcr.io/$PROJECT_ID/demo:$TAG_NAME

### Sonarqube
  - id: 'run-sonarqube'
    name: 'gcr.io/$PROJECT_ID/sonar-scanner:latest'
    args:
    - '-Dsonar.host.url=https://sonarcloud.io'
    - '-Dsonar.login=a60eb05b0aa82e81873bb247ad77724d01bf6a2d'
    - '-Dsonar.projectKey=danizheleva_demo-2T-GKE-CB'
    - '-Dsonar.organization=danizheleva'
    - '-Dsonar.sources=./src/main/java'
    - '-Dsonar.java.binaries=./src/main/java'

### Attest

  - id: 'attest-sonarqube'
    name: 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
    args:
      - '--artifact-url'
      - 'gcr.io/$PROJECT_ID/demo:$TAG_NAME'
      - '--attestor'
      - 'projects/$PROJECT_ID/attestors/cluster-approved'
      - '--keyversion'
      - 'projects/gkebinaryattz/locations/global/keyRings/my-binauthz-keyring/cryptoKeys/my-binauthz-kms-key-name/cryptoKeyVersions/1'

### Deploy
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          CLUSTER=$$(gcloud config get-value container/cluster)
          PROJECT=$$(gcloud config get-value core/project)
          ZONE=$$(gcloud config get-value compute/zone)
          
          gcloud container clusters get-credentials "$${CLUSTER}" \
            --project "$${PROJECT}" \
            --zone "europe-west1-b"  

          DIGEST=$(gcloud container images describe gcr.io/gkebinaryattz/demo:${TAG_NAME} --format="value(image_summary.digest)")

          sed -i "s|gcr.io/$PROJECT_ID/demo:.*|gcr.io/$PROJECT_ID/demo@$${DIGEST}|" ./kubernetes/deployments/prod/*.yaml
                  
          kubectl get ns production || kubectl create ns production
          kubectl apply --namespace production --recursive -f kubernetes/deployments/prod
          kubectl apply --namespace production --recursive -f kubernetes/services